<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-16T07:18:03.584Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>nanyaonan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VMware虚拟机(CentOS)配置之（三）linux配置hadoop（待续）</title>
    <link href="http://yoursite.com/2018/05/15/hadoop-01/"/>
    <id>http://yoursite.com/2018/05/15/hadoop-01/</id>
    <published>2018-05-15T15:24:50.000Z</published>
    <updated>2018-05-16T07:18:03.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><pre><code>我用的是xshell来对虚拟机进行操作的  在windows先下载好需要的jdk和hadoop压缩包首先进入home文件下，home文件下的都是本虚拟机的用户，1.进入当前用户文件夹，2.然后创建一个software文件夹，用来安装的软件</code></pre><p><img src="\image\hadoop_01\1.png" alt="avatar"><br>    3.进入到software文件夹使用输入rz命令打开windows下的文件系统<br>    (如果显示没有rz这个命令，则进行<strong>安装rz</strong>)<br>    4.选择要上传的文件，点击打开现在我们先来上传jdk<br><img src="\image\hadoop_01\2.png" alt="avatar"><br>    5.等待传输完毕即可<br><img src="\image\hadoop_01\3.png" alt="avatar"></p><h2 id="请忽略我的主机名（-后面的昵称）的变化，是自己的配置问题"><a href="#请忽略我的主机名（-后面的昵称）的变化，是自己的配置问题" class="headerlink" title="请忽略我的主机名（@后面的昵称）的变化，是自己的配置问题"></a>请忽略我的主机名（@后面的昵称）的变化，是自己的配置问题</h2><p>因为我在前面有些配置我在主机上配过了，所以用slave1来为大家写前半部分教程<br>请把我@后面的主机名，统一视为你们自己的主机名就可以了，这样方便你们自己理解。<br><img src="\image\hadoop_01\31.png" alt="avatar"><br>可以在最开始修改一个你想要的主机名，一直使用一个就好</p><h2 id="配置jdk"><a href="#配置jdk" class="headerlink" title="配置jdk"></a>配置jdk</h2><pre><code>1.ls 命令可以看到jdk压缩包</code></pre><p><img src="\image\hadoop_01\4.png" alt="avatar"><br>    2.tar -xzvf jdk-8u121-linux-x64.tar.gz<br><img src="\image\hadoop_01\5.png" alt="avatar"><br>    3.ls 查看会发现多了一个文件夹<br><img src="\image\hadoop_01\6.png" alt="avatar"><br>    4.现在我们可以删除压缩包了，然后给文件夹改一个简单点的名字，以便配置路径方便<br><img src="\image\hadoop_01\7.png" alt="avatar"><br><img src="\image\hadoop_01\8.png" alt="avatar"><br>    5.修改配置文件<br>    输入 vi /etc/profile 来修改配置文件<br>    打开后，在文件最后的追加如下内容，然后保存<br><img src="\image\hadoop_01\9.png" alt="avatar"><br>    6.执行 source /etc/profile,这样就不用重启就可以生成配置文件了<br><img src="\image\hadoop_01\10.png" alt="avatar"><br>    7.执行 java -version 出现如下结果就表示配置成功了<br><img src="\image\hadoop_01\11.png" alt="avatar"></p><h2 id="配置hadoop"><a href="#配置hadoop" class="headerlink" title="配置hadoop"></a>配置hadoop</h2><pre><code>1.和jdk的方式一样放在software下一直配置到解压压缩包配置到如下状态</code></pre><p><img src="\image\hadoop_01\12.png" alt="avatar"><br>    2.修改配置文件如下：<br><img src="\image\hadoop_01\13.png" alt="avatar"><br>    并执行 source /etc/profile<br>    3.测试一下，hdfs命令<br><img src="\image\hadoop_01\14.png" alt="avatar"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code>进入到 hadoop/etc/hadoop 下，进行文件配置</code></pre><p><img src="\image\hadoop_01\14.png" alt="avatar"><br>1.<strong>vi core-site.xml 复制如下代码</strong><br>···<br><!-- Put site-specific property overrides in this file. --><br>    <configuration><br>           <property><br>                 <name>hadoop.tmp.dir</name><br>                 <value>file:/usr/hadoop/tmp</value><br>           <description>Abase for other temporary directories.</description><br>           </property><br>           <property><br>                 <name>fs.defaultFS</name><br>                 <value>hdfs://Master:9000</value><br>           </property><br>    </configuration><br>···<br>    修改如下<br><img src="\image\hadoop_01\15.png" alt="avatar"></p><ol start="2"><li><strong>vi hadoop-env.sh</strong> –安装jdk的路径<br><img src="\image\hadoop_01\16.png" alt="avatar"></li><li><strong>vi hdfs-site.xml</strong><br> 首先在 /software/hadoop 下建立一个dfs 文件夹，然后在dfs文件夹下建立一个data 和 name 文件夹，<br> 最后在data下建立一个tmp 文件夹<br> 然后回到/software/hadoop/etc/hadoop下<br> vi hdfs-site.xml，复制如下：<br>···<br> <configuration><pre><code> &lt;property&gt;        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;            &lt;value&gt;Master:50090&lt;/value&gt;   &lt;/property&gt;  &lt;property&gt;                     &lt;name&gt;dfs.replication&lt;/name&gt;          &lt;value&gt;1&lt;/value&gt;&lt;/property&gt;   &lt;property&gt;                &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;                  &lt;value&gt;file:/usr/hadoop/tmp/dfs/name&lt;/value&gt;     &lt;/property&gt;  &lt;property&gt;          &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;            &lt;value&gt;file:/usr/hadoop/tmp/dfs/data&lt;/value&gt;      </code></pre>   <br> </configuration><br>···<br> 修改如下：<br><img src="\image\hadoop_01\17.png" alt="avatar"></li><li><strong>vi mapred-site.xml</strong><br> 首先执行:<br><img src="\image\hadoop_01\18.png" alt="avatar"><br> 复制如下代码：<br>···<br> <configuration>  <pre><code>&lt;property&gt;         &lt;name&gt;mapreduce.framework.name&lt;/name&gt;           &lt;value&gt;yarn&lt;/value&gt;     &lt;/property&gt;    &lt;property&gt;           &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;             &lt;value&gt;Master:10020&lt;/value&gt;  &lt;/property&gt;    &lt;property&gt;                  &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;         &lt;value&gt;Master:19888&lt;/value&gt;  </code></pre>   <br> </configuration><br>···<br> 修改如下：将master<br><img src="\image\hadoop_01\19.png" alt="avatar"></li><li><strong>vi yarn-site.xml</strong><br> 复制如下代码：<br>···<br> <configuration>    <pre><code> &lt;!-- Site specific YARN configuration properties --&gt;     &lt;property&gt;                 &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;             &lt;value&gt;Master&lt;/value&gt;   &lt;/property&gt;  &lt;property&gt;              &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;         &lt;value&gt;mapreduce_shuffle&lt;/value&gt;      </code></pre>   <br> </configuration><br>···<br> 修改如下：<br><img src="\image\hadoop_01\20.png" alt="avatar"><br>6.<strong> vi slaves </strong><br>修改为slave1和slave2<br><img src="\image\hadoop_01\21.png" alt="avatar"><br><img src="\image\hadoop_01\22.png" alt="avatar"></li><li><strong>vi yarn-env.sh</strong><br>修改如下：<br><img src="\image\hadoop_01\23.png" alt="avatar"><h2 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h2>1.来到bin目录下<br><img src="\image\hadoop_01\24.png" alt="avatar"><br>2.<strong> ./hadoop namenode -format</strong> 执行初始化<br><img src="\image\hadoop_01\25.png" alt="avatar"><br>3.执行 <strong>./start-all.sh</strong><br><img src="\image\hadoop_01\26.png" alt="avatar"><br>4.执行<strong>jps</strong><br><img src="\image\hadoop_01\27.png" alt="avatar"><br>出现四个节点则成功配置hadoop<br>5.到etc/hadoop/下<br><strong> vi slaves </strong>将名字修改为对应虚拟机的ip<br><img src="\image\hadoop_01\28.png" alt="avatar"><br><img src="\image\hadoop_01\29.png" alt="avatar"><h2 id="复制到slave1-和-slave2（此处以slave2为例）"><a href="#复制到slave1-和-slave2（此处以slave2为例）" class="headerlink" title="复制到slave1 和 slave2（此处以slave2为例）"></a>复制到slave1 和 slave2（此处以slave2为例）</h2>将software打包压缩，通过<strong>scp</strong>命令压缩发送到slave1 和 slave2<br><img src="\image\hadoop_01\30.png" alt="avatar"><br><img src="\image\hadoop_01\32.png" alt="avatar"><br>到slave2相应位置查看一下<br><strong>ls /home/hadoop/</strong><br>可以看到压缩包，解压即可。<br>对slave1进行同样的操作<h2 id="启动文件服务（三台虚拟机需要同步开启）"><a href="#启动文件服务（三台虚拟机需要同步开启）" class="headerlink" title="启动文件服务（三台虚拟机需要同步开启）"></a>启动文件服务（三台虚拟机需要同步开启）</h2><strong>start-dfs.sh</strong><br><img src="\image\hadoop_01\33.png" alt="avatar"><br><img src="\image\hadoop_01\34.png" alt="avatar"><h2 id="启动-ResourceManager守护进程和NodeManager守护进程"><a href="#启动-ResourceManager守护进程和NodeManager守护进程" class="headerlink" title="启动 ResourceManager守护进程和NodeManager守护进程"></a>启动 ResourceManager守护进程和NodeManager守护进程</h2><strong>start-yarn.sh</strong><br><img src="\image\hadoop_01\36.png" alt="avatar"><br>##在不关闭服务的情况下：<br>http:/主机ip：8088会出现如下带有小象的页面<br><img src="\image\hadoop_01\37.png" alt="avatar"><br>http:/主机ip：50070会出现如下页面<br><img src="\image\hadoop_01\38.png" alt="avatar"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;我用的是xshell来对虚拟机进行操作的  
在windows先下载好需要的jdk和hadoop压缩包
首先进入home文件
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本命令：编辑文件（vim命令）输入（read命令）与输出（echo 命令）</title>
    <link href="http://yoursite.com/2018/05/12/shell-01/"/>
    <id>http://yoursite.com/2018/05/12/shell-01/</id>
    <published>2018-05-12T01:37:22.000Z</published>
    <updated>2018-05-12T16:31:13.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、首先进入到linux下的-usr-shell目录下"><a href="#一、首先进入到linux下的-usr-shell目录下" class="headerlink" title="一、首先进入到linux下的/usr/shell目录下"></a>一、首先进入到linux下的/usr/shell目录下</h2><p>创建一个文件 ‘touch text4.sh’<br>然后 ‘vi test4.sh’进入编辑文件，如图</p><p><img src="\image\shell_01\1.png" alt="avatar"></p><h2 id="二、进行编辑"><a href="#二、进行编辑" class="headerlink" title="二、进行编辑"></a>二、进行编辑</h2><p>输入’a’即可以进行编辑文档</p><p><img src="\image\shell_01\4.png" alt="avatar"></p><p>所有的 -p -n -t 等参数及参数后的内容都可以省略<br>    -p:输出提示字符<br>    -n:输入字符串长度，达到此长度，自动结束<br>    -t:输入限制时间，达到时间，自动结束输入<br>    -s: 隐藏输入内容</p><h2 id="三、运行文档"><a href="#三、运行文档" class="headerlink" title="三、运行文档"></a>三、运行文档</h2><p>运行语句’./test4.sh’</p><p><img src="\image\shell_01\3.png" alt="avatar"></p><p>通过运行结果我们发现，输出没有换行，此时我们<br>回到编辑页面</p><p><img src="\image\shell_01\2.png" alt="avatar"></p><p>我们看到有输出语句’\n’，因为是转义字符，所以我们应该在’echo’后面加上’-e’来转译<br>然后运行:如图：</p><p><img src="\image\shell_01\5.png" alt="avatar"></p><h2 id="四、注意"><a href="#四、注意" class="headerlink" title="四、注意"></a>四、注意</h2><p>空格,echo后面要有空格才能执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、首先进入到linux下的-usr-shell目录下&quot;&gt;&lt;a href=&quot;#一、首先进入到linux下的-usr-shell目录下&quot; class=&quot;headerlink&quot; title=&quot;一、首先进入到linux下的/usr/shell目录下&quot;&gt;&lt;/a&gt;一、首先进
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>VMware虚拟机(CentOS)配置之（二）linux配置tomcat</title>
    <link href="http://yoursite.com/2018/05/04/linux-03/"/>
    <id>http://yoursite.com/2018/05/04/linux-03/</id>
    <published>2018-05-04T07:59:50.000Z</published>
    <updated>2018-05-06T06:17:13.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装包的导入以及虚拟机与主机连接问题"><a href="#一、安装包的导入以及虚拟机与主机连接问题" class="headerlink" title="一、安装包的导入以及虚拟机与主机连接问题"></a>一、安装包的导入以及虚拟机与主机连接问题</h2><pre><code>参考上一篇</code></pre><p><a href="http://nanyaonan.top/2018/05/04/linux-02/" target="_blank" rel="noopener">http://nanyaonan.top/2018/05/04/linux-02/</a></p><h2 id="二、安装tomcat"><a href="#二、安装tomcat" class="headerlink" title="二、安装tomcat"></a>二、安装tomcat</h2><a id="more"></a><pre><code>1. 到tomcat压缩包目录下执行tar -zxvf apache-tomcat-7.0.68.tar.gz </code></pre><p><img src="\image\linux_03\1.png" alt="avatar"><br>    可以看到解压后的文件已经存在：<br><img src="\image\linux_03\2.png" alt="avatar"></p><pre><code>2. 在/usr 下建立一个文件夹tomcat5</code></pre><p><img src="\image\linux_03\3.png" alt="avatar"><br>    将文件解压后的文件拷贝到该文件夹中<br>    移动命令：mv /usr/local/apache-tomcat-5.5.23 /usr/tomcat5</p><pre><code>3. 进入文件下，然后执行./bin/startup.sh</code></pre><p><img src="\image\linux_03\4.png" alt="avatar"></p><pre><code>4. 打开linux浏览器：输入http://localhost:8080</code></pre><p><img src="\image\linux_03\5.png" alt="avatar"><br>    出现小猫即为配置成功</p><pre><code>5. 在windows浏览器下输入http://linuxip:8080出现小猫即为配置成功6. 另外可以查看日志</code></pre><p><img src="\image\linux_03\6.png" alt="avatar"><br><img src="\image\linux_03\7.png" alt="avatar"><br>    显示的的是执行的时间</p><pre><code>7. 切记关闭</code></pre><p><img src="\image\linux_03\8.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、安装包的导入以及虚拟机与主机连接问题&quot;&gt;&lt;a href=&quot;#一、安装包的导入以及虚拟机与主机连接问题&quot; class=&quot;headerlink&quot; title=&quot;一、安装包的导入以及虚拟机与主机连接问题&quot;&gt;&lt;/a&gt;一、安装包的导入以及虚拟机与主机连接问题&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;参考上一篇
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://nanyaonan.top/2018/05/04/linux-02/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nanyaonan.top/2018/05/04/linux-02/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、安装tomcat&quot;&gt;&lt;a href=&quot;#二、安装tomcat&quot; class=&quot;headerlink&quot; title=&quot;二、安装tomcat&quot;&gt;&lt;/a&gt;二、安装tomcat&lt;/h2&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>VMware虚拟机(CentOS)配置之（一）linux配置jdk</title>
    <link href="http://yoursite.com/2018/05/04/linux-02/"/>
    <id>http://yoursite.com/2018/05/04/linux-02/</id>
    <published>2018-05-04T03:47:18.000Z</published>
    <updated>2018-05-04T08:42:52.142Z</updated>
    
    <content type="html"><![CDATA[<p>首先介绍几个命令：</p><pre><code>#rpm -q -a  查看所有安装包#rpm -e [package name] 卸载安装包</code></pre><a id="more"></a><pre><code>#rpm -e [package name] --nodeps 忽略依赖强制卸载#rpm -ivh jdk-7u80-linux-x64.rpm  安装 #rpm -q jdk  #rpm -qa | grep jdk  查询是否安装</code></pre><p>下面正式开始配置和安装：（没有特殊说明均在windows下操作）</p><h2 id="一、windows下安装ssh-secure-file-transfer"><a href="#一、windows下安装ssh-secure-file-transfer" class="headerlink" title="一、windows下安装ssh secure file transfer"></a>一、windows下安装ssh secure file transfer</h2><h2 id="二、上传安装包"><a href="#二、上传安装包" class="headerlink" title="二、上传安装包"></a>二、上传安装包</h2><pre><code>1. 打开ssh secure file transfer2. 点击左上角quick connect</code></pre><p><img src="\image\linux_02\1.png" alt="avatar"></p><pre><code>3. hostname：虚拟机的ip地址：用ifconfig（虚拟机）命令得到username：是你虚拟机的用户名port：默认22点击connect</code></pre><p><img src="\image\linux_02\2.png" alt="avatar"></p><pre><code>4. 输入密码5. 在右侧进入到/usr/local路径下在左侧进入到你安装包放置的路径下将所需要的安装包从左侧拖到右侧左侧</code></pre><p><img src="\image\linux_02\3.png" alt="avatar"><br>    右侧<br><img src="\image\linux_02\4.png" alt="avatar"></p><h2 id="三、来到虚拟机终端安装jdk"><a href="#三、来到虚拟机终端安装jdk" class="headerlink" title="三、来到虚拟机终端安装jdk"></a>三、来到虚拟机终端安装jdk</h2><pre><code>1. 查看安装包位置</code></pre><p><img src="\image\linux_02\5.png" alt="avatar">    </p><pre><code>2. 执行rpm -ivh jdk-7u80-linux-x64.rpm</code></pre><p><img src="\image\linux_02\6.png" alt="avatar"><br>    权限不够就换成root权限</p><pre><code>3. 查看java版本</code></pre><p><img src="\image\linux_02\7.png" alt="avatar"><br>    javajdk就安装好了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先介绍几个命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#rpm -q -a  查看所有安装包
#rpm -e [package name] 卸载安装包
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux文件系统命令 以及 安装VMware虚拟机（CentOS-64）</title>
    <link href="http://yoursite.com/2018/04/21/linux-01/"/>
    <id>http://yoursite.com/2018/04/21/linux-01/</id>
    <published>2018-04-21T14:57:34.000Z</published>
    <updated>2018-05-06T06:16:57.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装VMware虚拟机（CentOS-64）"><a href="#安装VMware虚拟机（CentOS-64）" class="headerlink" title="安装VMware虚拟机（CentOS-64）"></a>安装VMware虚拟机（CentOS-64）</h2><p><a href="https://blog.csdn.net/qq_35589955/article/details/80057929" target="_blank" rel="noopener">https://blog.csdn.net/qq_35589955/article/details/80057929</a></p><h2 id="linux-文件系统命令"><a href="#linux-文件系统命令" class="headerlink" title="linux 文件系统命令"></a>linux 文件系统命令</h2><pre><code>1.  ls ：显示目录文件ls 选项或目录</code></pre><a id="more"></a><p><img src="\image\linux_01\11.png" alt="avatar"></p><pre><code>2.  ls -l   :显示详情</code></pre><p><img src="\image\linux_01\12.png" alt="avatar"></p><pre><code>3.  cd :切换目录 cd [目录名] cd /   切换回根目录 cd ..   回到上一级目录</code></pre><p><img src="\image\linux_01\13.png" alt="avatar"></p><pre><code>4. 命令前的中括号里是所在路径，当前所在路径也可以用pwd查询</code></pre><p><img src="\image\linux_01\14.png" alt="avatar"></p><pre><code>5.  touch [文件名] ：创建空文件</code></pre><p><img src="\image\linux_01\15.png" alt="avatar"><br>    创建完就可以使用 ls 查询到了</p><pre><code>6.  mkdir [目录名]  ：创建空目录</code></pre><p><img src="\image\linux_01\16.png" alt="avatar"></p><pre><code>7.  cp 文件名1 文件名2  …  目录名 将1个或n个文件复制到目录下 8.  cp -r 目录1 文件1 …  目录名 将n个目录中的内容或者文件复制到目录下</code></pre><p><img src="\image\linux_01\17.png" alt="avatar"><br>     mv ：移动或更名<br>     mv file1 file2 :将file1更名为file2<br>     mv file1 dir  :将文件或目录移动到dir下<br>     仔细观察mv操作：<br><img src="\image\linux_01\18.png" alt="avatar"></p><pre><code>10.  rm file2  删除文件file2  rm –r dir1  删除目录dir1 </code></pre><p><img src="\image\linux_01\19.png" alt="avatar">)</p><pre><code>11.  cat [文件名] ：显示文件内容 cat /etc/issue  cat /etc/services  执行：cat /etc/services</code></pre><p><img src="\image\linux_01\20.png" alt="avatar"><br>         more [文件名]<br>     (空格)或f 显示下一页<br>     (enter) 显示下一行<br>     q或Q 退出 </p><pre><code>13. head -num [文件名]  -num 显示文件的前num行</code></pre><p><img src="\image\linux_01\21.png" alt="avatar"></p><pre><code>14.  tail -num [文件名]显示文件的后num行15. ln -s [源文件] [目标文件]  -s 创建软连接 Ex: ln –s /etc/issue /issue.soft  创建文件/etc/issue的软连接/issue.soft  ln /etc/issue /issue.hard  创建文件/etc/issue的硬链接/issue.运行命令：ln -s /etc/issue /issue.soft此时可能会提醒：权限不够这是我们有两种解决方案：1.进入到root权限下；然后运行该语句 </code></pre><p><img src="\image\linux_01\22.png" alt="avatar"><br>    2.使用下面一个命令修改权限</p><pre><code>16. 权限管理命令： chmod :改变权限 chmod [{ugo}{+-=}{rwx}] [文件或目录]         [421] [文件或目录] eg： chmod [ugo+-=rwx] 文件或目录              777首先：输入ll命令查看权限：</code></pre><p><img src="\image\linux_01\23.png" alt="avatar"><br><img src="\image\linux_01\24.png" alt="avatar"></p><pre><code>234位表示root权限，567位表示拥有者（创建该文件的用户）的权限，最后三位表示其它组成员的权限。比如，我这个虚拟机除了root 还有nanyaonan和scott这两个用户rwx分别表示可读可写可执行。命令中 u 代表root的权限，g代表本组权限，o代表其他组的权限</code></pre><p><img src="\image\linux_01\25.png" alt="avatar"><br>    可以看见helloword的user权限已经被改变<br>    另外r = 4 w =2 x = 1对应上面的mode形式 chmod 764 helloword和上边的语法效果相同<br><img src="\image\linux_01\26.png" alt="avatar"></p><pre><code>17. 文件目录权限总结</code></pre><p><img src="\image\linux_01\27.png" alt="avatar"></p><pre><code>18. 改变所有者chown [用户] [文件或目录] Ex：chown nobody file1  改变文件file1的所有者为nobody 19.  chgrp:改变所属组chgrp [用户组] [文件或目录] Ex: chgrp adm file1  改变文件file1的所属组为adm 20.  umask:查看系统默认的权限直接使用umask：显示的是 0022 ，想得到真正的权限，应该用777去解码（777-022得到的数字即为权限），第一个0是特殊权限umask [-S]  -S 以rwx形式显示新建文件或目录的缺省权限 Ex: umask  umask -S</code></pre><p><img src="\image\linux_01\28.png" alt="avatar"></p><pre><code>21. 其它命令就不一一演示了，自行验证：22. 文件搜索命令 命令名称：which 命令路径：/usr/bin/which 执行权限：所有用户 功能描述：显示系统命令所在目录 语法：while [命令名称] Ex: which ls 23. 文件搜索命令 命令名称：find 命令路径：/usr/bin/find 执行权限：所有用户 功能描述：查找文件或目录 语法：find [搜索路径] [搜寻关键字] 范例  Ex: find /etc -name init  在目录/etc中查找文件  find / -size +204800  在根目录下查找大于100M的文件  find / -user sam  在根目录下查找所有者为sam的文件  find /etc -ctime -1  在/etc下查找24小时内被修改过属性的文件或目录  find /etc –size +163840 –a –size -204800  在/etc下查找大于—小于--的文件  find /etc -name inittab -exec ls -l {} \;  在/etc下查找inittab文件并显示详细信息24. 文件搜索命令 命令名称：locate 命令原意：list files in databases 命令路径：/usr/bin/locate 执行权限：所有用户 功能描述：寻找文件和目录 语法：locate [命令名称] Ex: locate file  列出所有跟file相关的文件25. 文件搜索命令 命令名称：updatedb 命令原意：update the slocate databases 命令路径：/usr/bin/updatedb 执行权限：root 功能描述：建立整个系统目录文件的数据库 语法：updatedb Ex: updatedb 文件搜索命26. 文件搜索命令 命令名称：grep 命令原意： 命令路径：/bin/grep 执行权限：所有用户 功能描述：在文件中搜寻字串匹配的行并输出 语法：grep [指定字符] [源文件] Ex: grep ftp /etc/services 27. 帮助命令 命令名称：man 命令原意：manual 命令路径：/usr/bin/man 执行权限：所有用户 功能描述：获取帮助信息 语法：man [命令或配置文件] Ex: man ls  查看ls命令的帮助信息  man services  查看配置文件services的帮助信息28. 帮助命令 命令名称：info 命令原意：information 命令路径：/usr/bin/info 执行权限：所有用户 功能描述：获取帮助信息 语法：info [任何关键字] Ex: iinfo ls  查看ls命令的帮助信息29. 帮助命令 命令名称：whatis、apropos makewhatis 命令原意：search the whatis database for strings 命令路径：/usr/bin/whatis apropos  /usr/sbin/makewhatis 执行权限：all user、 all user、root 功能描述：获取索引的简短说明信息 语法：whatis apropos [任何关键字] Ex: whatis ls  apropos fstab 相当于man -k  makewhatis  建立前两个命令使用的数据库，当使用这两个命令发生错误时，就是whatis dababase没有建立30. 压缩解压命令 不同格式的压缩包需要不同的命令命令名称：gzip 命令原意：gnu zip 命令路径：/bin/gzip 执行权限：所有用户 功能描述：压缩文件 语法：gzip 选项 [文件] 压缩后文件格式：.gz 31. 压缩解压命令 命令名称：gunzip 命令原意：gnu unzip 命令路径：/bin/gunzip 执行权限：所有用户 功能描述：解压缩.gz的压缩文件 语法：gunzip 选项 [压缩文件] Ex：gunzip file1.gz 32. 压缩解压命令  命令名称：tar 命令原意： 命令路径：/bin/tar 执行权限：所有用户 功能描述：打包目录 语法：tar 选项 [目录]  -c 产生.tar打包文件  -v 显示详细信息  -f 指定压缩后的文件名  -z 打包同时压缩 格式：.tar.gz Ex: tar –zcvf dir1.tar.gz dir1  将目录dir1压缩成一个打包并压缩的文件 33. 压缩解压命令 命令名称：zip 命令原意： 命令路径：/usr/bin/zip 执行权限：所有用户 功能描述：压缩文件或目录 语法：  zip 选项 [压缩后文件名称] [文件或目录]  -r 压缩目录 格式：.zip Ex: zip services.zip /etc/services  zip -r test.zip /test34. 压缩解压命令 命令名称：unzip 命令原意： 命令路径：/usr/bin/unzip 执行权限：所有用户 功能描述：解压.zip的压缩文件 语法：  unzip [压缩文件] Ex: upzip test.zip 35. 压缩解压命令 命令名称：bzip2 命令原意： 命令路径：/usr/bin/bzip2 执行权限：所有用户 功能描述：压缩文件 语法：  bzip2 选项 [文件]  -k 产生压缩文件后保留源文件 格式： .bz2 Ex: bzip2 –k file136. 压缩解压命令 命令名称：bunzip2 命令原意： 命令路径：/usr/bin/bunzip2 执行权限：所有用户 功能描述：解压缩 语法：  bzip2 选项 [文件]  -k 解压缩后保留源文件 Ex: bunzip2 –k file1.bz2 37. 网络通信命令 命令名称：write 命令原意： 命令路径：/usr/bin/write 执行权限：所有用户 功能描述：向另外一个用户发信息，以ctrl+D作为结束 语法：  write &lt;用户名&gt; Ex: write webmaster38. 网络通信命令 命令名称：wall 命令原意： 命令路径：/usr/bin/wall 执行权限：所有用户 功能描述：向所有用户广播信息 语法：  wall [message] [文件名] Ex: wall Happy New Year 39. 网络通信命令 命令名称：ping 命令原意： 命令路径：/usr/sbin/ping 执行权限：root 功能描述：测试网络连通性 语法：  ping 选项 ip地址 Ex: ping 192.168.1.1 40. 网络通信命令     命令名称：ifconfig 命令原意： 命令路径：/usr/sbin/ifconfig 执行权限：root 功能描述：查看网络设置信息 语法：  ifconfig 选项 [网卡设备标识]  -a 显示所有网卡信息 Ex: ifconfig -a41. 系统关机命令 命令名称：shutdown 命令原意： 命令路径：/usr/sbin/shutdown 执行权限：root 功能描述：关机 语法：  shutdown Ex: shutdown –h now 42. 系统关机命令  不抱有一丝幻想，不放弃一点机会，不停止一日努力 成功的秘诀就在于多努力一次。为了成功，你努力了多少次 命令名称：reboot 命令原意： 命令路径：/usr/sbin/reboot 执行权限：root 功能描述：重启系统 语法：  reboot Ex: reboot</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装VMware虚拟机（CentOS-64）&quot;&gt;&lt;a href=&quot;#安装VMware虚拟机（CentOS-64）&quot; class=&quot;headerlink&quot; title=&quot;安装VMware虚拟机（CentOS-64）&quot;&gt;&lt;/a&gt;安装VMware虚拟机（CentOS-64）&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_35589955/article/details/80057929&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_35589955/article/details/80057929&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;linux-文件系统命令&quot;&gt;&lt;a href=&quot;#linux-文件系统命令&quot; class=&quot;headerlink&quot; title=&quot;linux 文件系统命令&quot;&gt;&lt;/a&gt;linux 文件系统命令&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1.  ls ：显示目录文件
ls 选项或目录
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>多态之向上造型类型</title>
    <link href="http://yoursite.com/2018/04/18/java-02/"/>
    <id>http://yoursite.com/2018/04/18/java-02/</id>
    <published>2018-04-18T15:08:36.000Z</published>
    <updated>2018-05-04T08:42:22.296Z</updated>
    
    <content type="html"><![CDATA[<p>解释：<br>    <code>属性是绑定到变量上（只能调用父类中有的属性），重写方法是动态绑定到对象上</code><br>A a = new B();//a 变量，B是对象<br><a id="more"></a><br><img src="\image\1.png" alt="avatar"></p><pre><code>从图中我们可以看出,变量a所能引用的属性只有A中的属性，B中的属性不出现在a可以引用的列表中此即属性是（静态）绑定到对象变量上的</code></pre><p><img src="\image\2.png" alt="avatar"></p><pre><code>从图中我们可以看出，此时类B重写了方法printS();执行过程如下啊：编译时，引用的是A中的printS();但在运行时，发现B中重写了方法,于是就用B中的方法覆盖了A中的方法。如下：</code></pre><p><img src="\image\3.png" alt="avatar"></p><pre><code>此即方法时动态绑定到对象上的。如若想引用B类中的属性，该如何操作呢？见下图：将a强制转换为B类型即可。</code></pre><p><img src="\image\4.png" alt="avatar"></p><pre><code>但是我们会发现</code></pre><p><img src="\image\5.png" alt="avatar"></p><pre><code>强制转换为C类型也不会报错，这是因为在编译期间，编译器只检查语法错误。现在我们运行一下：</code></pre><p><img src="\image\6.png" alt="avatar"></p><pre><code>发现报了ClassCastException错误。为了避免类似的错误发生我们使用如下方法进行改善代码：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Aoo  a = new Coo();</span><br><span class="line">      if(a instanceof Boo)&#123;</span><br><span class="line">            Boo  b = (Boo)a; </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><pre><code>instanceof就是判断变量所指的对象是不是某一类型。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解释：&lt;br&gt;    &lt;code&gt;属性是绑定到变量上（只能调用父类中有的属性），重写方法是动态绑定到对象上&lt;/code&gt;&lt;br&gt;A a = new B();//a 变量，B是对象&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的特征（后续会贴详细代码）</title>
    <link href="http://yoursite.com/2018/04/18/java-01/"/>
    <id>http://yoursite.com/2018/04/18/java-01/</id>
    <published>2018-04-17T16:16:14.000Z</published>
    <updated>2018-05-04T08:41:35.248Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象有三大特征：继承，封装，多态。今天我就来详细介绍一下面向对象这三个特征，着重记一下各个特征的优缺点<br><a id="more"></a></p><h2 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h2><pre><code>java语言支持单继承，一个类可以继承一个父类这样，父类里的方法及属性，被子类继承，有利于程序的功能扩展为了开发方便好处：可以不用修改一个类，利用继承的特点，可以扩展这个类，生成一个子类，有利于二次开发优点：增加代码重用性，有利于类的功能扩展，也保证了父类的安全性</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class new A()&#123;</span><br><span class="line">    public A()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h2><pre><code>将属性/方法封装到类里，将一段逻辑封装到方法里好处：提高代码的重用性，减少冗余，减少代码的可见性，相对安全</code></pre><h2 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h2><pre><code>对象的多态：不同父类型的引用指向同一个对象，会有不同的行为功能变量的多态：同一个变量指向不同的对象时，会有不同的行为好处:在使用代码时更方便，有利于程序的修改</code></pre><h3 id="向上造型"><a href="#向上造型" class="headerlink" title="向上造型"></a>向上造型</h3><pre><code>父类型的变量指向子类型的对象在编译期间，变量调用的方法是父类型中的。在运行期间, 如果调用的方法子类重写了，那么一定是重写后的方法如果没重写，那么调用的是父类中的方法变量调用的属性：一定是父类中的属性 总结：`属性是绑定到变量上（只能调用父类中有的属性），重写方法是动态绑定到对象上`。属性看变量类型，方法看对象类型向下转型：将父类型的变量，转换子类型的变量</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Aoo  a = new Boo();//a是变量，Book（）是对象</span><br><span class="line">Boo  b = (Boo)a;</span><br></pre></td></tr></table></figure><p>有可能会出现ClassCastException:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Aoo  a = new Coo();</span><br><span class="line">Boo  b = (Boo)a;</span><br></pre></td></tr></table></figure></p><p>编译期间：javac.exe只检查代码的语法是否正确。<br>此处语法虽然正确，但是a的类型并不是<br>为了避免这种情况发生，需要使用 instanceof进行判断，<br>判断变量所指的对象是不是某一类型。<br>上述代码应该改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Aoo  a = new Coo();</span><br><span class="line">if(a instanceof Boo)&#123;</span><br><span class="line">    Boo  b = (Boo)a; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文详细代码：<br>&lt;a href = <a href="http://nanyaonan.top/2018/04/18/java-02/&gt;" target="_blank" rel="noopener">http://nanyaonan.top/2018/04/18/java-02/&gt;</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象有三大特征：继承，封装，多态。今天我就来详细介绍一下面向对象这三个特征，着重记一下各个特征的优缺点&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
</feed>
